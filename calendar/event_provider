import 'package:flutter/material.dart';
import 'package:wsa_2025/models/event.dart';

class EventProvider extends ChangeNotifier {
  List<Event> _events = [];
  DateTime _selectedDay = DateTime.now();

  // Novo campo para guardar o texto do filtro
  String _filterText = '';

  EventProvider() {
    _loadMockEvents();
  }

  void _loadMockEvents() {
    _events = [
      Event(
        id: '1',
        title: 'cerimonia de abertura',
        description: 'evento de abertura oficial',
        start: DateTime(2025, 8, 1, 9),
        end: DateTime(2025, 8, 1, 10),
        location: 'Auditorio Central',
        participants: [Role.CE, Role.TL],
      ),

      Event(
        id: '2',
        title: 'teste concluido',
        description: 'aplicativo funcionando',
        start: DateTime(2025, 8, 3, 15),
        end: DateTime(2025, 8, 3, 17),
        location: 'Senai Pinda',
        participants: [Role.C],
      )
      // adicona mais eventos aqui :)
    ];
  }

  DateTime get selectedDay => _selectedDay;

  void setSelectedDay(DateTime day) {
    _selectedDay = day;
    notifyListeners();
  }


  void setFilterText(String text) {
    _filterText = text.toLowerCase();
    notifyListeners();
  }


  List<Event> get filteredEvents {
    return _events.where((e) {
      final matchDay = e.start.year == _selectedDay.year &&
          e.start.month == _selectedDay.month &&
          e.start.day == _selectedDay.day;

      final matchFilter = _filterText.isEmpty ||
          e.title.toLowerCase().contains(_filterText) ||
          e.description.toLowerCase().contains(_filterText);

      return matchDay && matchFilter;
    }).toList();
  }

  
  List<Event> getEventsForDay(DateTime day) {
    return _events.where((e) =>
      e.start.year == day.year &&
      e.start.month == day.month &&
      e.start.day == day.day
    ).toList();
  }
}
